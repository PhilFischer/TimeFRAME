// Generated by rstantools.  Do not edit by hand.

/*
    TimeFRAME is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TimeFRAME is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TimeFRAME.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dgp_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dgp");
    reader.add_event(66, 64, "end", "model_dgp");
    return reader;
}
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
simplex_base(const int& K, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        validate_non_negative_index("B", "K", K);
        validate_non_negative_index("B", "(K - 1)", (K - 1));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> B(K, (K - 1));
        stan::math::initialize(B, DUMMY_VAR__);
        stan::math::fill(B, DUMMY_VAR__);
        current_statement_begin__ = 4;
        for (int k = 1; k <= (K - 1); ++k) {
            current_statement_begin__ = 5;
            for (int i = 1; i <= k; ++i) {
                current_statement_begin__ = 5;
                stan::model::assign(B, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            stan::math::sqrt((1.0 / (k * (k + 1)))), 
                            "assigning variable B");
            }
            current_statement_begin__ = 6;
            stan::model::assign(B, 
                        stan::model::cons_list(stan::model::index_uni((k + 1)), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                        -(stan::math::sqrt(((1.0 * k) / (k + 1)))), 
                        "assigning variable B");
            current_statement_begin__ = 7;
            for (int i = (k + 2); i <= K; ++i) {
                current_statement_begin__ = 7;
                stan::model::assign(B, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), 
                            0.0, 
                            "assigning variable B");
            }
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(B);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct simplex_base_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const int& K, std::ostream* pstream__) const {
        return simplex_base(K, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_dgp
  : public stan::model::model_base_crtp<model_dgp> {
private:
        int d;
        int N;
        int K;
        int L;
        matrix_d b;
        matrix_d frac;
        std::vector<double> t;
        matrix_d X;
        matrix_d X_sd;
        double sigma;
        double rho;
        double rho_r;
        matrix_d sdev;
        matrix_d SB;
        matrix_d LL_f;
        matrix_d LL_r;
        matrix_d G_f;
        matrix_d G_r;
public:
    model_dgp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dgp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dgp_namespace::model_dgp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "d", "int", context__.to_vec());
            d = int(0);
            vals_i__ = context__.vals_i("d");
            pos__ = 0;
            d = vals_i__[pos__++];
            check_greater_or_equal(function__, "d", d, 1);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("b", "(2 * d)", (2 * d));
            validate_non_negative_index("b", "K", K);
            context__.validate_dims("data initialization", "b", "matrix_d", context__.to_vec((2 * d),K));
            b = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((2 * d), K);
            vals_r__ = context__.vals_r("b");
            pos__ = 0;
            size_t b_j_2_max__ = K;
            size_t b_j_1_max__ = (2 * d);
            for (size_t j_2__ = 0; j_2__ < b_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    b(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("frac", "(logical_gt(L, 0) ? (2 * d) : 0 )", (logical_gt(L, 0) ? (2 * d) : 0 ));
            validate_non_negative_index("frac", "L", L);
            context__.validate_dims("data initialization", "frac", "matrix_d", context__.to_vec((logical_gt(L, 0) ? (2 * d) : 0 ),L));
            frac = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((logical_gt(L, 0) ? (2 * d) : 0 ), L);
            vals_r__ = context__.vals_r("frac");
            pos__ = 0;
            size_t frac_j_2_max__ = L;
            size_t frac_j_1_max__ = (logical_gt(L, 0) ? (2 * d) : 0 );
            for (size_t j_2__ = 0; j_2__ < frac_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < frac_j_1_max__; ++j_1__) {
                    frac(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("t", "N", N);
            context__.validate_dims("data initialization", "t", "double", context__.to_vec(N));
            t = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < t_k_0_max__; ++k_0__) {
                t[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("X", "d", d);
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(d,N));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(d, N);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = N;
            size_t X_j_1_max__ = d;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("X_sd", "d", d);
            validate_non_negative_index("X_sd", "N", N);
            context__.validate_dims("data initialization", "X_sd", "matrix_d", context__.to_vec(d,N));
            X_sd = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(d, N);
            vals_r__ = context__.vals_r("X_sd");
            pos__ = 0;
            size_t X_sd_j_2_max__ = N;
            size_t X_sd_j_1_max__ = d;
            for (size_t j_2__ = 0; j_2__ < X_sd_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_sd_j_1_max__; ++j_1__) {
                    X_sd(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "sigma", "double", context__.to_vec());
            sigma = double(0);
            vals_r__ = context__.vals_r("sigma");
            pos__ = 0;
            sigma = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma", sigma, 0);
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "rho", "double", context__.to_vec());
            rho = double(0);
            vals_r__ = context__.vals_r("rho");
            pos__ = 0;
            rho = vals_r__[pos__++];
            check_greater_or_equal(function__, "rho", rho, 0);
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "rho_r", "double", context__.to_vec());
            rho_r = double(0);
            vals_r__ = context__.vals_r("rho_r");
            pos__ = 0;
            rho_r = vals_r__[pos__++];
            check_greater_or_equal(function__, "rho_r", rho_r, 0);
            // initialize transformed data variables
            current_statement_begin__ = 27;
            validate_non_negative_index("sdev", "d", d);
            validate_non_negative_index("sdev", "N", N);
            sdev = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(d, N);
            stan::math::fill(sdev, DUMMY_VAR__);
            stan::math::assign(sdev,stan::math::sqrt(add(square(X_sd), square(sigma))));
            current_statement_begin__ = 28;
            validate_non_negative_index("SB", "K", K);
            validate_non_negative_index("SB", "(K - 1)", (K - 1));
            SB = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, (K - 1));
            stan::math::fill(SB, DUMMY_VAR__);
            stan::math::assign(SB,simplex_base(K, pstream__));
            current_statement_begin__ = 29;
            validate_non_negative_index("LL_f", "N", N);
            validate_non_negative_index("LL_f", "N", N);
            LL_f = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(LL_f, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("LL_r", "N", N);
            validate_non_negative_index("LL_r", "N", N);
            LL_r = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(LL_r, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("G_f", "N", N);
            validate_non_negative_index("G_f", "N", N);
            G_f = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(G_f, DUMMY_VAR__);
            stan::math::assign(G_f,gp_exp_quad_cov(t, 1.0, rho));
            current_statement_begin__ = 32;
            validate_non_negative_index("G_r", "N", N);
            validate_non_negative_index("G_r", "N", N);
            G_r = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            stan::math::fill(G_r, DUMMY_VAR__);
            stan::math::assign(G_r,gp_exp_quad_cov(t, 1.0, rho_r));
            // execute transformed data statements
            current_statement_begin__ = 34;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 34;
                stan::model::assign(G_f, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(G_f, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "G_f") + 1e-9), 
                            "assigning variable G_f");
            }
            current_statement_begin__ = 35;
            stan::math::assign(LL_f, cholesky_decompose(G_f));
            current_statement_begin__ = 37;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 37;
                stan::model::assign(G_r, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            (stan::model::rvalue(G_r, stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "G_r") + 1e-9), 
                            "assigning variable G_r");
            }
            current_statement_begin__ = 38;
            stan::math::assign(LL_r, cholesky_decompose(G_r));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            validate_non_negative_index("Z_f", "(K - 1)", (K - 1));
            validate_non_negative_index("Z_f", "N", N);
            num_params_r__ += ((K - 1) * N);
            current_statement_begin__ = 42;
            validate_non_negative_index("Z_r", "L", L);
            validate_non_negative_index("Z_r", "N", N);
            num_params_r__ += (L * N);
            current_statement_begin__ = 43;
            validate_non_negative_index("baux", "d", d);
            validate_non_negative_index("baux", "K", K);
            num_params_r__ += (d * K);
            current_statement_begin__ = 44;
            validate_non_negative_index("A", "d", d);
            validate_non_negative_index("A", "L", L);
            num_params_r__ += (d * L);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dgp() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 41;
        if (!(context__.contains_r("Z_f")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Z_f missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Z_f");
        pos__ = 0U;
        validate_non_negative_index("Z_f", "(K - 1)", (K - 1));
        validate_non_negative_index("Z_f", "N", N);
        context__.validate_dims("parameter initialization", "Z_f", "matrix_d", context__.to_vec((K - 1),N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z_f((K - 1), N);
        size_t Z_f_j_2_max__ = N;
        size_t Z_f_j_1_max__ = (K - 1);
        for (size_t j_2__ = 0; j_2__ < Z_f_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_f_j_1_max__; ++j_1__) {
                Z_f(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(Z_f);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Z_f: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("Z_r")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Z_r missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Z_r");
        pos__ = 0U;
        validate_non_negative_index("Z_r", "L", L);
        validate_non_negative_index("Z_r", "N", N);
        context__.validate_dims("parameter initialization", "Z_r", "matrix_d", context__.to_vec(L,N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z_r(L, N);
        size_t Z_r_j_2_max__ = N;
        size_t Z_r_j_1_max__ = L;
        for (size_t j_2__ = 0; j_2__ < Z_r_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_r_j_1_max__; ++j_1__) {
                Z_r(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(Z_r);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Z_r: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("baux")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable baux missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("baux");
        pos__ = 0U;
        validate_non_negative_index("baux", "d", d);
        validate_non_negative_index("baux", "K", K);
        context__.validate_dims("parameter initialization", "baux", "matrix_d", context__.to_vec(d,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> baux(d, K);
        size_t baux_j_2_max__ = K;
        size_t baux_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < baux_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < baux_j_1_max__; ++j_1__) {
                baux(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(-(0.5), 0.5, baux);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable baux: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("A")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A");
        pos__ = 0U;
        validate_non_negative_index("A", "d", d);
        validate_non_negative_index("A", "L", L);
        context__.validate_dims("parameter initialization", "A", "matrix_d", context__.to_vec(d,L));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> A(d, L);
        size_t A_j_2_max__ = L;
        size_t A_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(A);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 41;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z_f;
            (void) Z_f;  // dummy to suppress unused var warning
            if (jacobian__)
                Z_f = in__.matrix_constrain((K - 1), N, lp__);
            else
                Z_f = in__.matrix_constrain((K - 1), N);
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z_r;
            (void) Z_r;  // dummy to suppress unused var warning
            if (jacobian__)
                Z_r = in__.matrix_constrain(L, N, lp__);
            else
                Z_r = in__.matrix_constrain(L, N);
            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> baux;
            (void) baux;  // dummy to suppress unused var warning
            if (jacobian__)
                baux = in__.matrix_lub_constrain(-(0.5), 0.5, d, K, lp__);
            else
                baux = in__.matrix_lub_constrain(-(0.5), 0.5, d, K);
            current_statement_begin__ = 44;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A;
            (void) A;  // dummy to suppress unused var warning
            if (jacobian__)
                A = in__.matrix_constrain(d, L, lp__);
            else
                A = in__.matrix_constrain(d, L);
            // transformed parameters
            current_statement_begin__ = 47;
            validate_non_negative_index("S", "d", d);
            validate_non_negative_index("S", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> S(d, K);
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("mu", "d", d);
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> mu(d, N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("W", "(K - 1)", (K - 1));
            validate_non_negative_index("W", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> W((K - 1), N);
            stan::math::initialize(W, DUMMY_VAR__);
            stan::math::fill(W, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("f", "K", K);
            validate_non_negative_index("f", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f(K, N);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("r", "L", L);
            validate_non_negative_index("r", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> r(L, N);
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 53;
            stan::math::assign(S, add(stan::model::rvalue(b, stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "b"), elt_multiply(baux, stan::model::rvalue(b, stan::model::cons_list(stan::model::index_min_max((d + 1), (2 * d)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "b"))));
            current_statement_begin__ = 54;
            stan::math::assign(W, multiply(Z_f, transpose(LL_f)));
            current_statement_begin__ = 55;
            stan::math::assign(r, inv_logit(multiply(Z_r, transpose(LL_r))));
            current_statement_begin__ = 56;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 56;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            softmax(multiply(SB, stan::model::rvalue(W, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "W"))), 
                            "assigning variable f");
            }
            current_statement_begin__ = 57;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 57;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            add(multiply(S, stan::model::rvalue(f, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "f")), multiply(A, stan::math::log(stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "r")))), 
                            "assigning variable mu");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 47;
            size_t S_j_1_max__ = d;
            size_t S_j_2_max__ = K;
            for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(S(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: S" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 48;
            size_t mu_j_1_max__ = d;
            size_t mu_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(mu(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: mu" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable mu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 49;
            size_t W_j_1_max__ = (K - 1);
            size_t W_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(W(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: W" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable W: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 50;
            size_t f_j_1_max__ = K;
            size_t f_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(f(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: f" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable f: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 51;
            size_t r_j_1_max__ = L;
            size_t r_j_2_max__ = N;
            for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(r(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: r" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable r: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 60;
            for (int j = 1; j <= (K - 1); ++j) {
                current_statement_begin__ = 60;
                lp_accum__.add(std_normal_log(get_base1(Z_f, j, "Z_f", 1)));
            }
            current_statement_begin__ = 61;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 61;
                lp_accum__.add(std_normal_log(get_base1(Z_r, l, "Z_r", 1)));
            }
            current_statement_begin__ = 62;
            for (int l = 1; l <= L; ++l) {
                current_statement_begin__ = 62;
                lp_accum__.add(normal_log(stan::model::rvalue(A, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "A"), stan::model::rvalue(frac, stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "frac"), stan::model::rvalue(frac, stan::model::cons_list(stan::model::index_min_max((d + 1), (2 * d)), stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list())), "frac")));
            }
            current_statement_begin__ = 63;
            for (int i = 1; i <= d; ++i) {
                current_statement_begin__ = 63;
                lp_accum__.add(normal_log(get_base1(X, i, "X", 1), get_base1(mu, i, "mu", 1), get_base1(sdev, i, "sdev", 1)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Z_f");
        names__.push_back("Z_r");
        names__.push_back("baux");
        names__.push_back("A");
        names__.push_back("S");
        names__.push_back("mu");
        names__.push_back("W");
        names__.push_back("f");
        names__.push_back("r");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((K - 1));
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((K - 1));
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dgp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z_f = in__.matrix_constrain((K - 1), N);
        size_t Z_f_j_2_max__ = N;
        size_t Z_f_j_1_max__ = (K - 1);
        for (size_t j_2__ = 0; j_2__ < Z_f_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_f_j_1_max__; ++j_1__) {
                vars__.push_back(Z_f(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z_r = in__.matrix_constrain(L, N);
        size_t Z_r_j_2_max__ = N;
        size_t Z_r_j_1_max__ = L;
        for (size_t j_2__ = 0; j_2__ < Z_r_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_r_j_1_max__; ++j_1__) {
                vars__.push_back(Z_r(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> baux = in__.matrix_lub_constrain(-(0.5), 0.5, d, K);
        size_t baux_j_2_max__ = K;
        size_t baux_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < baux_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < baux_j_1_max__; ++j_1__) {
                vars__.push_back(baux(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> A = in__.matrix_constrain(d, L);
        size_t A_j_2_max__ = L;
        size_t A_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                vars__.push_back(A(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 47;
            validate_non_negative_index("S", "d", d);
            validate_non_negative_index("S", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> S(d, K);
            stan::math::initialize(S, DUMMY_VAR__);
            stan::math::fill(S, DUMMY_VAR__);
            current_statement_begin__ = 48;
            validate_non_negative_index("mu", "d", d);
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> mu(d, N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            current_statement_begin__ = 49;
            validate_non_negative_index("W", "(K - 1)", (K - 1));
            validate_non_negative_index("W", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> W((K - 1), N);
            stan::math::initialize(W, DUMMY_VAR__);
            stan::math::fill(W, DUMMY_VAR__);
            current_statement_begin__ = 50;
            validate_non_negative_index("f", "K", K);
            validate_non_negative_index("f", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> f(K, N);
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("r", "L", L);
            validate_non_negative_index("r", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> r(L, N);
            stan::math::initialize(r, DUMMY_VAR__);
            stan::math::fill(r, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 53;
            stan::math::assign(S, add(stan::model::rvalue(b, stan::model::cons_list(stan::model::index_min_max(1, d), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "b"), elt_multiply(baux, stan::model::rvalue(b, stan::model::cons_list(stan::model::index_min_max((d + 1), (2 * d)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "b"))));
            current_statement_begin__ = 54;
            stan::math::assign(W, multiply(Z_f, transpose(LL_f)));
            current_statement_begin__ = 55;
            stan::math::assign(r, inv_logit(multiply(Z_r, transpose(LL_r))));
            current_statement_begin__ = 56;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 56;
                stan::model::assign(f, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            softmax(multiply(SB, stan::model::rvalue(W, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "W"))), 
                            "assigning variable f");
            }
            current_statement_begin__ = 57;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 57;
                stan::model::assign(mu, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                            add(multiply(S, stan::model::rvalue(f, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "f")), multiply(A, stan::math::log(stan::model::rvalue(r, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "r")))), 
                            "assigning variable mu");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t S_j_2_max__ = K;
                size_t S_j_1_max__ = d;
                for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                        vars__.push_back(S(j_1__, j_2__));
                    }
                }
                size_t mu_j_2_max__ = N;
                size_t mu_j_1_max__ = d;
                for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                        vars__.push_back(mu(j_1__, j_2__));
                    }
                }
                size_t W_j_2_max__ = N;
                size_t W_j_1_max__ = (K - 1);
                for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                        vars__.push_back(W(j_1__, j_2__));
                    }
                }
                size_t f_j_2_max__ = N;
                size_t f_j_1_max__ = K;
                for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                        vars__.push_back(f(j_1__, j_2__));
                    }
                }
                size_t r_j_2_max__ = N;
                size_t r_j_1_max__ = L;
                for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                        vars__.push_back(r(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dgp";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Z_f_j_2_max__ = N;
        size_t Z_f_j_1_max__ = (K - 1);
        for (size_t j_2__ = 0; j_2__ < Z_f_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z_f" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Z_r_j_2_max__ = N;
        size_t Z_r_j_1_max__ = L;
        for (size_t j_2__ = 0; j_2__ < Z_r_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_r_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z_r" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t baux_j_2_max__ = K;
        size_t baux_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < baux_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < baux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "baux" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t A_j_2_max__ = L;
        size_t A_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t S_j_2_max__ = K;
            size_t S_j_1_max__ = d;
            for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "S" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_j_2_max__ = N;
            size_t mu_j_1_max__ = d;
            for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t W_j_2_max__ = N;
            size_t W_j_1_max__ = (K - 1);
            for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "W" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t f_j_2_max__ = N;
            size_t f_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t r_j_2_max__ = N;
            size_t r_j_1_max__ = L;
            for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "r" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t Z_f_j_2_max__ = N;
        size_t Z_f_j_1_max__ = (K - 1);
        for (size_t j_2__ = 0; j_2__ < Z_f_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_f_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z_f" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Z_r_j_2_max__ = N;
        size_t Z_r_j_1_max__ = L;
        for (size_t j_2__ = 0; j_2__ < Z_r_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_r_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z_r" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t baux_j_2_max__ = K;
        size_t baux_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < baux_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < baux_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "baux" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t A_j_2_max__ = L;
        size_t A_j_1_max__ = d;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t S_j_2_max__ = K;
            size_t S_j_1_max__ = d;
            for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "S" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t mu_j_2_max__ = N;
            size_t mu_j_1_max__ = d;
            for (size_t j_2__ = 0; j_2__ < mu_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "mu" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t W_j_2_max__ = N;
            size_t W_j_1_max__ = (K - 1);
            for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "W" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t f_j_2_max__ = N;
            size_t f_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < f_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < f_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "f" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t r_j_2_max__ = N;
            size_t r_j_1_max__ = L;
            for (size_t j_2__ = 0; j_2__ < r_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < r_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "r" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_dgp_namespace::model_dgp stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
